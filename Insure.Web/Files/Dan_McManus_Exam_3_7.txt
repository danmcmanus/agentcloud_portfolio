1. A Func<> is a delegate function that takes in type paramaters and returns a specified type.
   An Action encapsulates a method that takes in one paramater and doesn't return a value.
   a Predicate is a method that defines some criteria and determines whether or not a specicfic object meets those criteria.
   They all can utilize lambda expressions using anonymous types.
   
2. < Included in answer to question #7 >

3. SELECT DISTINCT(cityname) FROM country
    WHERE state = 'Wisconsin'
    ORDER BY(cityname);
    
4. SELECT cityname FROM orders
    WHERE (SELECT orderamount FROM customer)
    WHERE ordertotal > orderamount;
    
5. SELECT DISTINCT(name),SUM(ordertotal)
    JOIN customer FROM orders ON(customer.id = orders.name)
    WHERE customer = name;
    
6. var Strings = stringList.TakeWhile(x => (x == x.Distinct().ToString()));

7. using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exam_3_7
{
    public class Program
    {
        string _grade1 = "90,100,82,89,55";
        string _grade2 = "85,55,75,95,65";
        List<string> Gradestring = new List<string>();
        List<int> Grades = new List<int>() { };
        public double CalculateAvg()
        {
            Gradestring.Add(_grade1);
            Gradestring.Add(_grade2);
            Gradestring.ForEach(x => x = x.Count().ToString());
            var grades = string.Join(Gradestring[0],Gradestring[1]);
            var splitGrades = grades.Split(',').ToList();
            var orderedNumbers = splitGrades.OrderByDescending(n => n).ToList();
            foreach (string s in orderedNumbers)
            {
                Grades.Add(Convert.ToInt32(s));
            }
            var curveApplied = Grades.Take(orderedNumbers.Count - 1).ToList();
            double avg = curveApplied.Sum() % curveApplied.Average();
            return avg;

            //var gradeList = Gradestring[0].Split(',').Select(x => x).ToList() +""+ Gradestring[1].Split(',').Select(y => y).ToList();

            //var orderedNumbers = gradeList.OrderByDescending(n => n).ToList();
            //var curveApplied = orderedNumbers.Take(orderedNumbers.Count - 1).ToList();
            //decimal avg = curveApplied.Sum() / curveApplied.Count;
            //string avg = curveApplied.ToString();
            //int Avg = Convert.ToInt16(avg);

        }
        
        
        static void Main(string[] args)
        {
            Program p = new Program();
            double result = p.CalculateAvg();
            Console.WriteLine(result);
            Console.ReadLine();
            var stringList = new List<string>() {"112233445566" };
            var Strings = stringList.TakeWhile(x => (x == x.Distinct().ToString()));
            
        }
    }
}